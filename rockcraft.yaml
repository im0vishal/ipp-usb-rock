name: ipp-usb
base: ubuntu@24.04  # Specifies the base image to be used in the OCI container (Ubuntu 24.04).
version: "1.0"  # Version number of the image.
summary: IPP-over-USB - Driverless IPP printing on USB-connected printers
description: |
  ipp-usb is a daemon that enables driverless IPP printing on USB-connected
  printers. It emulates an IPP network printer, providing full access to the
  physical printer: Printing, scanning, fax out, and the admin web interface.

license: Apache-2.0  # Specifies the license for the project.

platforms:
  amd64:  # Supports 64-bit x86 architecture.
  arm64:  # Supports 64-bit ARM architecture.
  armhf:  # Supports 32-bit ARM architecture.

services:
  dbus:
    command: /scripts/run-dbus.sh
    override: replace
    on-failure: restart
    startup: enabled

  ipp-usb-server:
    command: /scripts/run-ipp-usb-server.sh  # Specifies the script to run the IPP-USB server.
    startup: enabled  # Ensures the service starts when the container starts.
    override: replace  # Replaces any default service behavior.
    on-failure: restart  # Restarts the service if it fails.
    after: [dbus]  # Ensures the IPP-USB server starts after the D-Bus service.

  ipp-usb:
    command: /scripts/run-ipp-usb.sh  # Specifies the script to start IPP-USB.
    startup: enabled
    override: replace
    on-failure: restart
    after: [dbus,ipp-usb-server]  # Ensures IPP-USB starts after the D-Bus service.

parts:
  goipp:
    plugin: go  # Uses the Go plugin for building the GoIPP component.
    source: https://github.com/OpenPrinting/goipp.git  # Clones the GoIPP source code.
    source-type: git  # Specifies that the source is a Git repository.
    build-packages:
      - golang-go  # Installs Go compiler for building GoIPP.
    override-prime: ""  # No additional steps are needed in the prime stage.

  ipp-usb:
    plugin: go  # Uses the Go plugin to build IPP-USB.
    source: https://github.com/OpenPrinting/ipp-usb.git  # Clones the IPP-USB source code.
    source-type: git
    override-build: |
      set -eux  # Enables strict error handling for debugging.
      craftctl default  # Executes the default build steps.

      # Move the compiled ipp-usb binary to the system's sbin directory.
      mkdir -p ${CRAFT_PART_INSTALL}/usr/sbin
      mv ${CRAFT_PART_INSTALL}/bin/ipp-usb ${CRAFT_PART_INSTALL}/usr/sbin/

      # Install configuration files.
      mkdir -p ${CRAFT_PART_INSTALL}/etc
      cp ipp-usb.conf ${CRAFT_PART_INSTALL}/etc

      # Install quirks files used by IPP-USB for handling printer-specific quirks.
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/ipp-usb/quirks
      cp ipp-usb-quirks/* ${CRAFT_PART_INSTALL}/usr/share/ipp-usb/quirks/

    build-packages:
      - golang-go
      - libavahi-client-dev
      - libavahi-common-dev
      - libavahi-compat-libdnssd-dev
      - libdbus-1-dev
      - libusb-1.0-0-dev
      - ronn

    stage-packages:
      - libavahi-client3
      - libavahi-common3
      - libusb-1.0-0
      - udev

    prime:
      - etc
      - usr/sbin
      - lib    
      - usr/lib
      - usr/share/ipp-usb

    after: [goipp]

  avahi-daemon:
    plugin: nil
    overlay-packages:
      - avahi-daemon
      - avahi-utils
      - libnss-mdns
      - mdns-scan
      - dbus
      - python3
      - dbus-system-bus-common
    override-build: |
      craftctl default
      mkdir -p "${CRAFT_PART_INSTALL}/usr/share/dbus-1/"
      cp /usr/share/dbus-1/system.conf "${CRAFT_PART_INSTALL}/usr/share/dbus-1/system.conf"


  utils:
    plugin: nil
    overlay-packages:
      - python3
      - udev

  scripts:
    plugin: dump  # Copies scripts without modification.
    source: scripts/  # Uses the local scripts directory as the source.
    organize:
      run-ipp-usb.sh: scripts/run-ipp-usb.sh  # Ensures the script is placed in the correct location.
      run-ipp-usb-server.sh: scripts/run-ipp-usb-server.sh
      run-dbus.sh: scripts/run-dbus.sh

    override-prime: |
      set -eux
      craftctl default  # Executes the default prime steps.

      # Ensure the run-ipp-usb.sh script has executable permissions.
      if [ -f "$CRAFT_PRIME/scripts/run-ipp-usb.sh" ]; then
        chmod +x "$CRAFT_PRIME/scripts/run-ipp-usb.sh"
      fi

      # Ensure the run-ipp-usb-server.sh script has executable permissions.
      if [ -f "$CRAFT_PRIME/scripts/run-ipp-usb-server.sh" ]; then
        chmod +x "$CRAFT_PRIME/scripts/run-ipp-usb-server.sh"
      fi

      # Ensure the run-dbus.sh script has executable permissions.
      if [ -f "$CRAFT_PRIME/scripts/run-dbus.sh" ]; then
        chmod +x "$CRAFT_PRIME/scripts/run-dbus.sh"
      fi

    after: [ipp-usb,avahi-daemon]  # Ensures scripts are added after the main IPP-USB component.
